/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.GovtRolePanel;

import Business.Enterprise.DistrictEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.FarmerData.Farmer;
import Business.Organization.FarmerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import javax.swing.JPanel;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.plot.PiePlot;

/**
 *
 * @author Aastha
 */
public class AnalyseSoilDataJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalyseSoilDataJPanel
     */
    private JPanel container;
    private EnterpriseDirectory edr;
    private double soilScore = 0;
    private int poorcount = 0;
    private int averagecount = 0;
    private int goodcount = 0;
    private int excellentcount = 0;
    private double poorperc = 0;
    private double averageperc = 0;
    private double goodperc = 0;
    private int excellentperc = 0;

    public AnalyseSoilDataJPanel(JPanel container, EnterpriseDirectory edr) {
        initComponents();
        this.container = container;
        this.edr = edr;
        populateComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        distComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        pieChartPanel = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        distComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distComboBoxActionPerformed(evt);
            }
        });
        add(distComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, 270, 30));

        jLabel3.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        jLabel3.setText("Select District/City :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, -1, -1));
        add(pieChartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 630, 530));

        backBtn.setBackground(new java.awt.Color(0, 153, 153));
        backBtn.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 690, 110, 50));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/crop-imagecopy2.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1530, 770));
    }// </editor-fold>//GEN-END:initComponents

    private void distComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distComboBoxActionPerformed
        // TODO add your handling code here:

        DistrictEnterprise distent = (DistrictEnterprise) distComboBox.getSelectedItem();

        for (Organization org : distent.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof FarmerOrganization) {
                for (UserAccount user : org.getUserAccountDirectory().getUserAccountList()) {
                    Farmer farmer = user.getPerson().getFarmer();

                    int length = farmer.getSoilDataList().size();
                    if (length > 0) {

                        soilScore = farmer.getSoilDataList().get(length - 1).getSoilScore();
                        calculatePieData(soilScore);
                    } else {

                    }

                }
                draw_pie_chart();
                clearvalues();
            }
        }

    }//GEN-LAST:event_distComboBoxActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox distComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel pieChartPanel;
    // End of variables declaration//GEN-END:variables

    private void draw_pie_chart() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        calculatePercentage();
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Poor", poorperc);
        dataset.setValue("Average", averageperc);
        dataset.setValue("Good", goodperc);

        JFreeChart chart = ChartFactory.createPieChart(
                "Soil Score", // chart title 
                dataset, // data    
                false, // do not include legend   
                true,
                false);

        PiePlot plot = (PiePlot) chart.getPlot();

        pieChartPanel.removeAll();
        ChartPanel chartPanel = new ChartPanel(chart);

        pieChartPanel.add(chartPanel);
        pieChartPanel.validate();
        pieChartPanel.setOpaque(false);
    }

    private void calculatePercentage() {
        //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        int total = poorcount + averagecount + goodcount + excellentcount;
double temp;
        if (total != 0) {
            temp = (double)((double)poorcount / (double)total);
            poorperc =  (temp * 100);
            temp = (double)((double)averagecount / (double)total);
            averageperc =  (temp * 100);
            temp = (double)((double)goodcount / (double)total);
            goodperc =  (temp * 100);
        }

    }

    private void populateComboBox() {
        //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        for (Enterprise ent : edr.getEnterpriseList()) {
            if (ent instanceof DistrictEnterprise) {
                distComboBox.addItem((DistrictEnterprise) ent);
            }
        }
    }

    private void clearvalues() {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        poorcount = 0;
        poorperc = 0;
        averagecount = 0;
        averageperc = 0;
        goodcount = 0;
        goodperc = 0;

    }

    private void calculatePieData(double healthscore) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        if (healthscore >= 0.0 && healthscore < 3.0) {
            poorcount++;
        } else if (healthscore >= 3.0 && healthscore < 3.5) {
            averagecount++;
        } else if (healthscore >= 3.5 && healthscore < 15.0) {
            goodcount++;
        }

    }
}
